@inject CategoryService CategoryService;

<EditForm Model="categoryModel" OnValidSubmit="SaveCategory">
  <DataAnnotationsValidator />
  <div class="card border-0 ">
    <div class="card-header bg-main-color text-white d-flex justify-content-between align-items-center" style="
      min-width: 300px">
      <h4>
        @(categoryModel.Id == 0 ? "Save" : "Edit") Category
      </h4>
      <button type="button" class="btn btn-sm btn-danger" @onclick="CloseForm">X</button>
    </div>
    <div class="card-body">
      <div class="mb-3">
        <label class="form-label">Name: </label>
        <InputText @bind-Value="categoryModel.Name" class="form-control" placeholder="Category name"
          @onblur="OnNameBlur" />
        <ValidationMessage For="() => categoryModel.Name" />
      </div>
      <div class="mb-3">
        <label class="form-label">Slug: </label>
        <InputText @bind-Value="categoryModel.Slug" class="form-control" placeholder="Category slug"
          disabled="@(categoryModel.Id > 0)" />
        <ValidationMessage For="() => categoryModel.Slug" />
      </div>
    </div>
    <div class="card-footer d-flex justify-content-between align-items-center">
      <button type="button" class="btn btn-default" @onclick="CloseForm">Cancel</button>
      <button type="submit" class="btn btn-default">Save</button>
    </div>
  </div>
</EditForm>

@code {
  [Parameter]
  public EventCallback OnCloseForm { get; set; }
  [Parameter]
  public Category Category { get; set; }
  [Parameter]
  public EventCallback<CreatedCategory> OnSaveCategory { get; set; }
  private Category categoryModel = new();
  protected override void OnParametersSet()
  {
    categoryModel = Category;
  }
  private async Task SaveCategory()
  {
    CreatedCategory result = await CategoryService.SaveCategory(categoryModel);
    if (result.Status)
    {
      categoryModel = new();
    }
    await OnSaveCategory.InvokeAsync(result);
  }
  private void OnNameBlur()
  {

    if (categoryModel.Id == 0 && !string.IsNullOrWhiteSpace(categoryModel.Name))
    {
      categoryModel.Slug = categoryModel.Name.Slugify();
    }
  }
  private async Task CloseForm()
  {
    categoryModel = new();
    await OnCloseForm.InvokeAsync();
  }
}